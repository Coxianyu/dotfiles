## vim-bookmark
添加或者删除书签 make a mark| mm
移除所有书签 clear all mark | mc
添加注释书签 make a comment mark |mi
跳转到下一个书签 jump to next mark |mn
跳转到上一个书签 jump to previous mark | mp

## vim-signify
选择模式下进入对齐 select mode to align | ,sa

## ultisnips
展开片段 expand snippet | <c-q>
跳转到片段下一个地方 jump to next snippet  | <c-n>
跳转到片段上一个地方 jump to previous snippet| <c-p>

## vim-signify
对比当前文件和暂存区的区别 diff workspace file and staged file | :SignifyDiff

## asyncrun
异步执行命令 exec command | :AsyncRun {command}

## vim-commentary
快速注释 comment quickly | gcc

## vim-translator
命令栏显示翻译结果 translator in command line| :Translate
浮动窗口显示翻译结果 translator in float windows | :TranslateW
用结果替换选择的文字 translator replace word | :TranslateR
翻译当前光标下的单词 | <leader>w
翻译选择的单词  | <leader>w


## muti
打开 nvimtree | <f1>
查看 coc 提供的当前光标下单词的帮助 | K
查看 vim help 文件的帮助 | <leader>K

## indentLine
关闭或者打开缩进线 close or open indentLine | :IndentLinesToggle

## maximizer
切换窗口最大化和最小化  | tg

## lable
切换窗口 | tt
关闭窗口 | tr

## leaderF

查询当前路径下的文件             | <leader>ff
查询当前缓冲区的函数             | <leader>fF
查询缓冲区                       | <leader>fb
查询所有缓冲区                   | <leader>fB
查询当前缓冲区的函数             | <leader>fa
查询所有缓冲区中的函数           | <leader>fA
查询当前缓冲区中的一行           | <leader>fl
查询所有缓冲区中的一行           | <leader>fL
执行vim历史命令                  | <leader>fh
执行vim /和？ 的搜索命令         | <leader>fH
查询执行过的用户自定义命令       | <leader>fs
查询执行过的用户自定义命令       | <c-p>
查询 quickfix 窗口               | <leader>fq
快速修改文件的类型               | <leader>fi
查询jump跳转点                   | <leader>fj
查询 help 信息                   | <leader>fv
查询 snippets                    | <leader>fz
查询整个项目中的函数定义和宏定义 | <leader>fgt
查询光标下函数引用               | <leader>fgr

## float
lazygit        | <leader>rg
htop           | <leader>rh
vsplit windows | <leader>rt
ranger | <leader>rr
打开浮动窗口   | <f12>

## telescope

查询文件                                      | <leader>tf
查询函数                                      | <leader>tF
查询执行过的用户自定义命令                    | <leader>tH
在当前目录下所有文件中 grep 字符串            | <leader>tr
在当前文件中搜索行                            | <leader>tl
git_files                                     | <leader>tN
git_commits                                   | <leader>tc
git_bcommits                                  | <leader>tC
git_branches                                  | <leader>tL
git_stash                                     | <leader>ts
command_history                               | <leader>to
search_history                                | <leader>tS
man_pages                                     | <leader>tm
mark                                          | <leader>tM
寄存器                                        | <leader>tR
suggest_spell                                 | <leader>tp
tagstack                                      | <leader>tk
symbols                                       | <leader>ty
git_status                                    | <leader>tY
quickfix                                      | <leader>tq
bookmarks all                                 | <leader>tB
bookmarks current_file                        | <leader>tn
ultisnips                                     | <leader>tv
查看当前目录下所有文件的TODOlist              | <leader>td
floaterm                                      | <leader>tg
查看当前文件中的错误 diagnostics current_file | <leader>te
查看所有缓冲区中的错误 diagnostics all buffer | <leader>tE
buffer                                        | <leader>tb
查看最近使用的文件 mru                        | <leader>tu
help_tags                                     | <leader>ti

## todo-comment
todo    | TODO
fix     | FIX
hack    | HACK
perf    | PERF
note    | NOTE
warning | WARNING

## coc.nvim
跳转到下一个错误                                  | [g
跳转到上一个错误                                  | ]h
使用 lsp 跳转到定义                               | <leader>qd
垂直分屏查询定义                                  | <leader>qD
Fix-current-buffer                                | <leader>qF
格式化代码                                        | <leader>qf
查询implementaation(实现)                         | <leader>qi
查询引用(reference)                               | <leader>qr
重命名                                            | <leader>qR
查询type定义                                      | <leader>qy
竖屏查询函数引用                                  | <leader>qE
悬浮显示 lsp 和 vimhelp 的 document               | K
只显示 vim help 的 document                       | <leader>i
分屏幕显示 hover                                  | <leader>K
格式化代码                                        | <leader>qf
修复当前行                                        | <leader>qF
codeaction 先导键, 后接motion example <leader>aiw | <leader>a
在当前行使用 codeaction                           | <leader>ql

## misc
关闭搜索高亮              | <leader>s
Asyncrun 运行命令         | <leader>sr
显示ale错误详细信息       | <leader>sd
关闭ale                   | <leader>sf
前往ale下一个错误         | <leader>sn
前往ale上一个错误         | <leader>sp
source .vimrc             | <leader>sv


## asynctask

启用编译 | <f6>
运行程序 | <f5>

## vimspector
调试继续运行    | <leader>d<space>
运行到光标处    | <leader>dc
启动vimspector  | <leader>dd
关闭 vimspector | <leader>de
stepover        | <leader>d
stepout         | <leader>dk
显示所有断点    | <leader>dL
单步调试        | <leader>dl
暂停调试        | <leader>dp
重启调试        | <leader>dr
删除watch       | <leader>dW
添加watch       | <leader>dw
清除所有断点    | <leader>dy
设置条件断点    | <leader>dbB
设置断点        | <leader>dbb
设置函数断点    | <leader>dbp


## tips
保存文件             | ww
不保存退出vim        | we
保存退出vim          | wq
关闭缓冲区           | wb
跳转到上次插入的地方 | gi
关闭右边缓冲区       | tl


## aerial 显示大纲的插件
打开大纲         | <f3>
竖屏显示函数     | <c-v>
折叠或者打开代码 | o


## BufferSwitch
跳转到数字对应的缓冲区 |  <leader>number


## comment 代码注释插件

切换 [count]行代码的注释状态              | [count]gcc
切换 [count]块代码的注释状态              | [count]gcb
自定义注释代码块, 可以使用 y / 等移动命令 | gc{motion} example: gcf"
在下一行产生注释, 然后进入插入模式        | gco
在上一行产生注释, 然后进入插入模式        | gcO
跳转到行末， 插入注释然后进入编辑模式     | gcA
使用行注释对代码块进行注释                | g>[count]{motion}
对当前行使用行注释                        | g>c
对当前行使用块注释                        | g>b
从当前光标注释到行末                      | gc$
从光标当前位置注释到行的末尾              | [count]<leader>c$


## textobjects





## vim-surround
将<pre>替换为<next>, example:cs'" 'test' --> "test"                     | cs<pre><next>
将整行包裹的 pre 替换为 next example:cst<q>' <q>test</q> ---> 'test'    | cst<pre><next>
删除 key ds"  example: "test"->test                                     | ds<key>
对于一个textobject 添加 key, example:ysiw[   test -> [test]             | ys<text-object><key>
输入 key 将选择的文本包裹                                               | 选择模式S<key>


## hop
跳转到屏幕上任何一个单词的开头  | e
跳转到屏幕上某一行的开头 | b


## gtags

查看光标下符号的定义          | <leader>cg
查看光标下符号的引用          | <leader>cs
查看有哪些函数调用了该函数    | <leader>cc
查找光标下的文件              | <leader>cf
查找哪些文件 include 了本文件 | <leader>ci
